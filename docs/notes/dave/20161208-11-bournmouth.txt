#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2016, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

# -----------------------------------------------------
# Login as root.
#[user@desktop]

    vmname=drop-03.trop.metagrid.co.uk
    ssh "root@${vmname:?}"

# -----------------------------------------------------
# -----------------------------------------------------
# Configure our hostname.
#[root@virtual]

    cat > "${HOME:?}/astrobase.conf" << EOF

        hostname=bournmouth.metagrid.co.uk

EOF

# -----------------------------------------------------
# -----------------------------------------------------
# Execute the root deploy steps.
#[user@desktop]

    source "${HOME:?}/astrotrop.conf"
    gedit "${ASTROTROP_CODE:?}/docs/notes/dave/20161208-02-root-deploy.txt" &

# -----------------------------------------------------
# -----------------------------------------------------
# Logout and login as docker user.
#[root@virtual]

    exit
    
    ssh "stevedore@${vmname:?}"

# -----------------------------------------------------
# -----------------------------------------------------
# Execute the base deploy steps.
#[user@desktop]

    source "${HOME:?}/astrotrop.conf"
    gedit "${ASTROTROP_CODE:?}/docs/notes/dave/20161208-03-base-deploy.txt" &

# -----------------------------------------------------
# Execute our postgis deploy.
#[user@desktop]

    source "${HOME:?}/astrotrop.settings"
    gedit "${ASTROTROP_CODE:?}/docs/notes/dave/20161208-04-postgis-deploy.txt" &

# -----------------------------------------------------
# Execute our geoserv deploy.
#[user@desktop]

    source "${HOME:?}/astrotrop.settings"
    gedit "${ASTROTROP_CODE:?}/docs/notes/dave/20161208-05-geoserv-deploy.txt" &

# -----------------------------------------------------
# Execute our geonode deploy.
#[user@desktop]

    source "${HOME:?}/astrotrop.settings"
    gedit "${ASTROTROP_CODE:?}/docs/notes/dave/20161208-06-geonode-deploy.txt" &

# -----------------------------------------------------
# Execute our rstudio deploy.
#[user@desktop]

    source "${HOME:?}/astrotrop.settings"
    gedit "${ASTROTROP_CODE:?}/docs/notes/dave/20161208-07-rstudio-deploy.txt" &

# -----------------------------------------------------
# -----------------------------------------------------
# Install our demo data.
#[user@virtual]

    source "${HOME:?}/astrotrop.conf"

    pushd "${rstudiodemodir:?}"

        wget 'http://data.metagrid.co.uk/astrotrop/Bournmouth/geostats.zip'

        unzip 'geostats.zip'

    popd

# -----------------------------------------------------
# -----------------------------------------------------
# Read the database settings from env file.
#[RStudio]

    readRenviron("/conf/postgis.conf")

    dbname <- Sys.getenv("POSTGRES_DATABASE")
    dbhost <- Sys.getenv("POSTGRES_HOSTNAME")
    dbport <- Sys.getenv("POSTGRES_HOSTPORT")
    dbuser <- Sys.getenv("POSTGRES_USERNAME")
    dbpass <- Sys.getenv("POSTGRES_PASSWORD")
    pgdsn  <- Sys.getenv("POSTGRES_DATANAME")

# -----------------------------------------------------
# Load the PostgreSQL database driver,
#[RStudio]

    library(RPostgreSQL)

# -----------------------------------------------------
# Test the PostgreSQL database driver,
#[RStudio]

    drv <- dbDriver("PostgreSQL")
    con <- dbConnect(drv, dbname=dbname, host=dbhost, user=dbuser, password=dbpass)

    dbGetQuery(con, "SELECT version()")

        #
        # PostgreSQL 9.4.5 on x86_64-unknown-linux-gnu ...."
        #

    dbGetQuery(con, "SELECT postgis_full_version()")

        #
        # POSTGIS="2.2.1 r14555" GEOS="3.4.2-CAPI-1.8.2 r3921 ...."
        #

# -----------------------------------------------------
# Load the ODBC database driver.
#[RStudio]

    library(RODBC)

# -----------------------------------------------------
# Test the ODBC database driver.
#[RStudio]

    con <- odbcConnect(dbname)

    sqlQuery(con, "SELECT version()")

        #
        # PostgreSQL 9.4.5 on x86_64-unknown-linux-gnu ...."
        #

    sqlQuery(con, "SELECT postgis_full_version()")

        #
        # POSTGIS="2.2.1 r14555" GEOS="3.4.2-CAPI-1.8.2 r3921 ...."
        #

# -----------------------------------------------------
# Load the GDAL tools.
#[RStudio]

    library(rgdal)

        #
        # Loading required package: sp
        # rgdal: version: 1.1-3, (SVN revision 594)
        # Geospatial Data Abstraction Library extensions to R successfully loaded]
        # ....

# -----------------------------------------------------
# Loading vector data into PostGIS from R.
# https://rpubs.com/dgolicher/6373
#[RStudio]
 
    #
    # Import the shapefiles.
    states<-readOGR('/demo/geostats/shapefiles','mex_states')

        #
        # OGR data source with driver: ESRI Shapefile 
        # Source: "//data/geostats/shapefiles", layer: "mex_states"
        # with 51 features
        # It has 15 fields
        #

    #
    # Plot the shape data.
    plot(states)
    box()
    axis(1)
    axis(2)
    grid()

    #
    # Export the test data to our database.
    writeOGR(
        states,
        pgdsn,
        "mexican_states",
        "PostgreSQL",
        layer_options = "geometry_name=geom"
        )

    #
    # Read the data back from our database.
    readOGR(
        pgdsn,
        "mexican_states"
        );

# -----------------------------------------------------
# Loading point data into PostGIS using R.
# https://rpubs.com/dgolicher/6373
#[RStudio]

    #
    # Import the point data.
    towns <- read.csv("/demo/geostats/textfiles/MexTowns.csv")
    head(towns)

            gid                       placename    pop         x        y
        1 30669                   Ciudad Madero 197216 -97.83139 22.27639
        2 30856                        González  11212 -98.43056 22.82806
        3 30908 Estación Manuel (Úrsulo Galván)  12077 -98.31972 22.72778
        4 31450       Ciudad Gustavo Díaz Ordaz  11523 -98.59694 26.23222
        5 32155                    Ciudad Mante  84787 -98.97222 22.74250
        6 32410               Heroica Matamoros 449815 -97.50417 25.87972

    #
    # To turn this into a spatial object we just need to tell R which columns hold the coordinates.
    coordinates(towns) <- ~x + y

    # We also need to set the set the CRS.
    # In this case it is the same as the shape file that we loaded (EPSG:4326)
    proj4string(towns) <- proj4string(states)

    #
    # Export the towns to our database.
    writeOGR(
        towns,
        pgdsn,
        "mexican_towns",
        "PostgreSQL",
        layer_options = "geometry_name=geom"
        )

# -----------------------------------------------------
# Loading point data into PostGIS using command line tools from R.
# https://rpubs.com/dgolicher/6373
#[RStudio]

    #
    # Import the point data.
    oaks <- read.csv("/demo/geostats/textfiles/MexOaks.csv")
    head(oaks)

    # Set the coordinate columns and CRS.
    coordinates(oaks) <- ~x + y
    proj4string(oaks) <- proj4string(states)

    #
    # Write the updated data to a shapefile.
    # TODO - Make sure the /temp directory is writeable.
    writeOGR(
        oaks,
        "/temp/shapefiles",
        "oaks",
        "ESRI Shapefile"
        )

    #
    # Use the command line shp2pgsql command to load the shapefile into the database.
    # TODO Use env variables to set the pgsql params.

    dbname <- Sys.getenv("POSTGRES_DATABASE")
    dbhost <- Sys.getenv("POSTGRES_HOSTNAME")
    dbport <- Sys.getenv("POSTGRES_HOSTPORT")
    dbuser <- Sys.getenv("POSTGRES_USERNAME")

    pgshp <- paste(
        'shp2pgsql',
        '-s',
        4326,
        '-I',
        '/temp/shapefiles/oaks.shp',
        'mexican_oaks',
        sep=' '
        )

    pgsql <- paste(
        'psql',
        '-h',
        dbhost,
        '-p',
        dbport,
        '-U',
        dbuser,
        '-d',
        dbname,
        sep=' '
        )

    command <- paste(
        pgshp,
        pgsql,
        sep=' | '
        )

    system(command)

# -----------------------------------------------------
# -----------------------------------------------------
# Import the data into GeoServer.
#[GeoServ]

    #
    # Create workspace

        name    [Bournmouth]
        uri     [http://bournmouth.astrotrop.org/]
        default [yes]
    #
    # Create store

        type [PostGIS]

        name [PostGIS Database]
        text [PostGIS Database]

        type [postgis]
        host [postgis]
        port [5432]

        database [postgisdata]
        username [postgisuser]
        password [shoh3gai9Ahth4ieLihu]

        primarykeys [yes]

    #
    # Import data from PostGIS database

        [Mexican oaks]
        [Mexican states]
        [Mexican towns]

# -----------------------------------------------------
# -----------------------------------------------------
# Import data into GeoNode.
#[user@virtual]

    source "${HOME:?}/astrotrop.conf"
    docker exec \
        -it \
        "${geonodedockname:?}" \
        bash

        pushd /geonode

            python manage.py updatelayers

        popd
    exit

