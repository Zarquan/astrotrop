#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2017, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

# -----------------------------------------------------
# Create a virtual machine.
#[user@desktop]

    createvm

        INFO : Node name [theta]
        INFO : Base name [fedora-25-docker-16G-20170713.qcow]
        INFO : Base path [/var/lib/libvirt/images/base/fedora-25-docker-16G-20170713.qcow]
        INFO : Disc name [theta.qcow]
        INFO : Disc size [16GiB]

# -----------------------------------------------------
# Login as root user.
#[user@desktop]

    ssh root@theta

# -----------------------------------------------------
# Allow Stevedore to use sudo with no password.
#[user@virtual]

    vi /etc/sudoers.d/stevedore

        Stevedore ALL=(ALL) NOPASSWD: ALL

# -----------------------------------------------------
# Login as Docker user.
#[user@desktop]

    ssh Stevedore@theta

# -----------------------------------------------------
# Set the the vm_max_map_count kernel setting.
# https://github.com/docker-library/elasticsearch/issues/111#issuecomment-268511769
#[user@virtual]

    sudo sysctl -w vm.max_map_count=262144

# -----------------------------------------------------
# Allow ports 80, 8000 and 8080 through the firewall.
#[user@virtual]

    sudo firewall-cmd --add-port=8000/tcp
    sudo firewall-cmd --add-port=8080/tcp

    sudo firewall-cmd --add-service=http

# -----------------------------------------------------
# Install git.
#[user@virtual]

    sudo dnf install -y git

# -----------------------------------------------------
# Install curl.
#[user@virtual]

    sudo dnf install -y curl

# -----------------------------------------------------
# Install the postgresql client.
#[user@virtual]

    sudo dnf install -y postgresql

# -----------------------------------------------------
# Configure our directories.
#[user@virtual]

#
# TODO Change this from astrotrop.settings
# to astrotrop.conf to match previous notes.
#

    if [ ! -e "${HOME:?}/astrotrop.settings" ]
    then
        cat > "${HOME:?}/astrotrop.settings" << EOF
GEONODE_BASE=\${HOME}/projects/geonode
GEONODE_WORK=\${GEONODE_BASE}/work
GEONODE_CODE=\${GEONODE_BASE}/code
GEONODE_REPO=https://github.com/GeoNode/geonode
EOF
    fi

# -----------------------------------------------------
# Checkout a local copy of the source code.
#[user@virtual]

    source "${HOME:?}/astrotrop.settings"
    if [ ! -e "${GEONODE_CODE:?}" ]
    then
        mkdir -p $(dirname "${GEONODE_CODE:?}")
        pushd $(dirname "${GEONODE_CODE:?}")
            git clone "${GEONODE_REPO}" $(basename "${GEONODE_CODE:?}")
        popd
    else
        pushd "${GEONODE_CODE:?}"
            git pull
        popd
    fi

# -----------------------------------------------------
# Create our work directory.
#[user@virtual]

    source "${HOME:?}/astrotrop.settings"
    mkdir -p "${GEONODE_WORK:?}"

# -----------------------------------------------------
# Create our compose file.
#[user@virtual]

    #env_file:
    #  - ${GEONODE_WORK:?}/postgres.env

    source "${HOME:?}/astrotrop.settings"
    cat > "${GEONODE_WORK:?}/astro-trop-000.yml" << EOF

version: '2'
services:

  postgres:
    image:
        astrotrop/postgis:1.3

  elasticsearch:
    # Deprecated
    # https://hub.docker.com/_/elasticsearch/ 
    #image: elasticsearch
    image:
        docker.elastic.co/elasticsearch/elasticsearch:5.5.0
    environment:
      - 'bootstrap.memory_lock=true'
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: 1g 

  rabbitmq:
    image:
      rabbitmq:3.6

  # WARNING
  # The container name is hard coded into the nginx config.
  django:
    build:
      ${GEONODE_CODE:?}
    links:
      - postgres
      - elasticsearch
      - rabbitmq
    depends_on:
      - rabbitmq
      - postgres
      - elasticsearch
    ports:
      - 8000:8000
    command:
      django-admin.py runserver 0.0.0.0:8000 --settings=geonode.settings
    env_file:
      - ${GEONODE_WORK:?}/geonode.env
    volumes:
      - ${GEONODE_CODE:?}:/usr/src/app
    environment:
      - DEBUG=True

  celery:
    build:
      ${GEONODE_CODE:?}
    links:
      - rabbitmq
      - postgres
      - elasticsearch
    depends_on:
      - rabbitmq
      - postgres
      - elasticsearch
    command:
      celery worker --app=geonode.celery_app:app -B -l INFO
    env_file:
      - ${GEONODE_WORK:?}/geonode.env
    volumes:
      - ${GEONODE_CODE:?}:/usr/src/app
    environment:
      - DEBUG=True

  # WARNING
  # The container name is hard coded into the nginx config.
  geoserver:
    image:
      geonode/geoserver:alias
    links:
      - postgres
    depends_on:
      - postgres
    ports:
      - 8080:8080
    volumes_from:
      - data_dir_conf
    env_file:
      - ./geoserv.env

  # WARNING
  # The upstream hostnames are hard coded into the nginx config.
  # The nginx config in the image deos not match the source code.
  nginx:
    image:
      geonode/nginx:geoserver
    links:
      - django
      - geoserver
    depends_on:
      - django
      - geoserver
    ports:
      - 80:80

  data_dir_conf:
    image:
      geonode/geoserver_data:2.9.x-oauth2
    container_name:
      geoserver_data_dir
    command:
      /bin/true
    volumes:
      - /geoserver_data/data

volumes:

  geoserver_data_dir:

EOF

# -----------------------------------------------------
# Create our postgres env file.
#[user@virtual]

    source "${HOME:?}/astrotrop.settings"

    cat > "${GEONODE_WORK:?}/postgres.env" << EOF
POSTGRES_DB=postgres
POSTGRES_HOST=postgres
POSTGRES_PORT=5432
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres
EOF

# -----------------------------------------------------
# Create our geonode env file.
#[user@virtual]

    source "${HOME:?}/astrotrop.settings"
    source "${GEONODE_WORK:?}/postgres.env"

#DATABASE_URL=postgres://postgres:postgres@postgres:5432/postgres

    cat > "${GEONODE_WORK:?}/geonode.env" << EOF
DATABASE_URL=postgres://${POSTGRES_USER:?}:${POSTGRES_PASSWORD:?}@${POSTGRES_HOST:?}:5432/${POSTGRES_DB:?}
DJANGO_SETTINGS_MODULE=geonode.settings
DOCKER_HOST
DOCKER_HOST_IP
BROKER_URL=amqp://guest:guest@rabbitmq:5672/
ALLOWED_HOSTS=['django',]
GEOSERVER_INTERNAL_URL=http://geoserver:8080/geoserver/
GEOSERVER_PUBLIC_LOCATION=http://theta.virtual.metagrid.co.uk/geoserver/
GEOSERVER_LOCATION=http://geoserver:8080/geoserver/
SITEURL=http://nginx/
PUBLIC_PORT=8000
C_FORCE_ROOT=1
EOF

# -----------------------------------------------------
# Create our geoserver env file.
#[user@virtual]

    source "${HOME:?}/astrotrop.settings"

    cat > "${GEONODE_WORK:?}/geoserv.env" << EOF
DOCKER_HOST
DOCKER_HOST_IP
PUBLIC_PORT=80
DJANGO_URL=http://django:8000/
GEOSERVER_PUBLIC_LOCATION=http://theta.virtual.metagrid.co.uk/geoserver/
GEOSERVER_LOCATION=http://geoserver:8080/geoserver/
SITEURL=http://nginx/
EOF

# -----------------------------------------------------
# Build our containers.
#[user@virtual]

    source "${HOME:?}/astrotrop.settings"

    docker-compose \
        --file "${GEONODE_WORK:?}/astro-trop-000.yml" \
        build

# -----------------------------------------------------
# Run our containers.
#[user@virtual]

    source "${HOME:?}/astrotrop.settings"

    docker-compose \
        --file "${GEONODE_WORK:?}/astro-trop-000.yml" \
        up


# -----------------------------------------------------
# Configure our geonode container.
#[user@desktop]

    ssh Stevedore@theta

        source "${HOME:?}/astrotrop.settings"
        docker exec \
            -it \
            work_django_1 \
            bash

            pushd /usr/src/app

                # Fix for mis-matched migration scripts.
                # Probably because we are getting the source code straight from GitHub
                python manage.py makemigrations --merge
            
                # Create the database tables.
                python manage.py migrate

                # Populate the initial data.
                python manage.py loaddata geonode/base/fixtures/initial_data.json

                # Create the super user account.
                python manage.py createsuperuser

# -----------------------------------------------------
# Check localhost connections.
#[user@desktop]

    ssh Stevedore@theta

        curl --head http://127.0.0.1:8080/geoserver/web/
        
        curl --head http://127.0.0.1:8000/

        curl --head http://127.0.0.1:80/
        curl --head http://127.0.0.1:80/geoserver/web/

# -----------------------------------------------------
# Check external connections using proxy.
#[user@desktop]

    curl --head http://theta.virtual.metagrid.co.uk/
    curl --head http://theta.virtual.metagrid.co.uk/geoserver/web/

    firefox http://theta.virtual.metagrid.co.uk/ &
    firefox http://theta.virtual.metagrid.co.uk/geoserver/web/ &

# -----------------------------------------------------
# Check external connections avoiding proxy.
#[user@desktop]

    curl --head http://theta.virtual.metagrid.co.uk:8000/
    curl --head http://theta.virtual.metagrid.co.uk:8080/geoserver/web/

    firefox http://theta.virtual.metagrid.co.uk:8000/ &
    firefox http://theta.virtual.metagrid.co.uk:8080/geoserver/web/ &



#
# Missing so far ...
#   * 2nd database for spatial for shapefile imports.
#   * data store in geoserver ?
#
# http://docs.geonode.org/en/master/tutorials/admin/install/custom_install.html#configure-postgresql-and-postgis
# http://docs.geonode.org/en/master/tutorials/install_and_admin/geonode_install/all_together.html

#
# "Copy the local_settings.py sample file called local_settings.py.sample"
# Add config for 2nd database ...

    DATABASES = {
        'default': {
             'ENGINE': 'django.db.backends.postgresql_psycopg2',
             'NAME': 'geonode',
             'USER': 'geonode',
             'PASSWORD': 'geonode',
         },
        # vector datastore for uploads
        'datastore' : {
            'ENGINE': 'django.contrib.gis.db.backends.postgis',
            #'ENGINE': '', # Empty ENGINE name disables
            'NAME': 'geonode_data',
            'USER' : 'geonode',
            'PASSWORD' : 'geonode',
            'HOST' : 'localhost',
            'PORT' : '5432',
        }
    }

#
# I don't think we have the datastore database configured.
# We only provide a simple URL.

#
# Auto login from GeoNode admin to GeoServ admin doesn't work.
#

#
# Upload of a TIF file is rejected because it is too large.
#

#
# Experiment with the Ubuntu apt-get install in a VM ?
# http://docs.geonode.org/en/master/tutorials/install_and_admin/quick_install.html#quick-installation
#


    https://github.com/GeoNode/geoserver-docker

    https://github.com/GeoNode/geonode
    
    https://github.com/GeoNode
    
    

