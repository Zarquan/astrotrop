#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2016, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

# -----------------------------------------------------
# Create our target machine.
#[user@desktop]

    https://cloud.digitalocean.com/droplets

    droplet : astrotrop-08
    image   : Docker 1.10.1 on Ubuntu-14.04

      12 CPU 
     32G memory
    320G disk space

    ipv4 : 188.166.150.174
    ipv6 : 2a03:b0c0:1:a1::17:1

# -----------------------------------------------------
# Update our DNS records.
#[admin@network]

        $ORIGIN ocean.metagrid.co.uk

    +   astrotrop-08    A       188.166.150.174
    +   astrotrop-08    AAAA    2a03:b0c0:1:a1::17:1

        $ORIGIN metagrid.xyz

    +   postgis-08  CNAME  astrotrop-08.ocean.metagrid.co.uk.
    +   rstudio-08  CNAME  astrotrop-08.ocean.metagrid.co.uk.
    +   geoserv-08  CNAME  astrotrop-08.ocean.metagrid.co.uk.
    +   webserv-08  CNAME  astrotrop-08.ocean.metagrid.co.uk.

# -----------------------------------------------------
# Check our DNS records.
#[user@desktop]

    host geoserv-08.metagrid.xyz

        geoserv-08.metagrid.xyz is an alias for astrotrop-08.ocean.metagrid.co.uk.
        astrotrop-08.ocean.metagrid.co.uk has address 188.166.150.174
        astrotrop-08.ocean.metagrid.co.uk has IPv6 address 2a03:b0c0:1:a1::17:1

    host rstudio-08.metagrid.xyz

        rstudio-08.metagrid.xyz is an alias for astrotrop-08.ocean.metagrid.co.uk.
        astrotrop-08.ocean.metagrid.co.uk has address 188.166.150.174
        astrotrop-08.ocean.metagrid.co.uk has IPv6 address 2a03:b0c0:1:a1::17:1

    host postgis-08.metagrid.xyz

        postgis-08.metagrid.xyz is an alias for astrotrop-08.ocean.metagrid.co.uk.
        astrotrop-08.ocean.metagrid.co.uk has address 188.166.150.174
        astrotrop-08.ocean.metagrid.co.uk has IPv6 address 2a03:b0c0:1:a1::17:1

    host webserv-08.metagrid.xyz

        webserv-08.metagrid.xyz is an alias for astrotrop-08.ocean.metagrid.co.uk.
        astrotrop-08.ocean.metagrid.co.uk has address 188.166.150.174
        astrotrop-08.ocean.metagrid.co.uk has IPv6 address 2a03:b0c0:1:a1::17:1

# -----------------------------------------------------
# Update our SSH config.
#[user@desktop]

    gedit "${HOME:?}/.ssh/config" &

    -   Host .... astrotrop-07
    +   Host .... astrotrop-07 astrotrop-08
            User root
            HostName %h.ocean.metagrid.co.uk
            IdentityFile ~/.ssh/zrq.digitalocean.com.rsa
            Protocol 2
            Compression yes
            PasswordAuthentication no

# -----------------------------------------
# SSH login to the server.
#[user@desktop]

    ssh astrotrop-08

# -----------------------------------------
# Disable plain text password login.
#[root@virtual]

    sed -i '
        s/^#PasswordAuthentication.*$/PasswordAuthentication no/
        ' /etc/ssh/sshd_config

    service ssh restart

# -----------------------------------------
# Install admin tools.
#[root@virtual]

    apt-get update

    apt-get -y install htop

    apt-get -y install pwgen

# -----------------------------------------------------
# Install and start the HAVEGE entropy generator.
# http://redmine.roe.ac.uk/issues/828
# http://blog-ftweedal.rhcloud.com/2014/05/more-entropy-with-haveged/
# http://stackoverflow.com/questions/26021181/not-enough-entropy-to-support-dev-random-in-docker-containers-running-in-boot2d/
#[root@virtual]

    apt-get -y install haveged

    service haveged status

        * haveged is running
    
# -----------------------------------------------------
# Check Docker is installed and running..
#[root@virtual]

    docker info

        Containers: 0
         Running: 0
         Paused: 0
         Stopped: 0
        Images: 0
        Server Version: 1.10.1
        Storage Driver: aufs
         Root Dir: /var/lib/docker/aufs
         Backing Filesystem: extfs
         Dirs: 0
         Dirperm1 Supported: false
        Execution Driver: native-0.2
        Logging Driver: json-file
        Plugins: 
         Volume: local
         Network: null host bridge
        Kernel Version: 3.13.0-77-generic
        Operating System: Ubuntu 14.04.3 LTS
        OSType: linux
        Architecture: x86_64
        CPUs: 12
        Total Memory: 31.42 GiB
        Name: astrotrop-08
        ID: Z2UV:6KFK:IROX:ZSMN:JOT3:CHOK:5VFT:HY7I:DGP2:EJBG:PDQX:EGXK

# -----------------------------------------------------
# Configure our build.
#[root@virtual]

    cat > "${HOME:?}/astrotrop.conf" << EOF

        dockerset=1.2

        project=/var/local/astrotrop
        tempdir=\${project:?}/temp
        datadir=\${project:?}/data

        tomcatuid=995:994

        dnsname=metagrid.xyz

EOF

# -----------------------------------------------------
# Create our data directories.
#[root@virtual]

    source "${HOME:?}/astrotrop.conf"

cat > "${HOME:?}/tools" << 'EOF'

    rmdata()
        {
        local path=${1:?}
        if [ -e "${path}" ]
        then
            rm -rf "${path}"
        fi
        }

    mkdata()
        {
        local path=${1:?}
        local user=${2:-}
        if [ ! -e "${path}" ]
        then
            mkdir --parents "${path:?}"
        fi
        if [ -n "${user:-}" ]
        then
            chown -R "${user:?}" "${path:?}"
        fi

        # Only if SELinux enabled        
        # chcon -t svirt_sandbox_file_t "${path:?}"

        }

EOF

    source "${HOME:?}/tools"

    rmdata "${tempdir:?}"
    rmdata "${datadir:?}"

    mkdata "${tempdir:?}"
    mkdata "${datadir:?}"

# -----------------------------------------------------
# Configure our Apache container.
#[root@virtual]

    source "${HOME:?}/astrotrop.conf"
    cat >> "${HOME:?}/astrotrop.conf" <<- EOF

        webservdockname=webserv
        webservdockport=80
        webservlinkname=webserv
        webservlinkport=80

        webservtempdir=\${tempdir:?}/webserv
        webservdatadir=\${datadir:?}/webserv

        webservhostname=webserv-08.\${dnsname:?}

EOF

# -----------------------------------------------------
# Create our Apache data directories.
#[root@virtual]

    source "${HOME:?}/astrotrop.conf"
    
    rmdata "${webservtempdir:?}"
    rmdata "${webservdatadir:?}"

    mkdata "${webservtempdir:?}"
    mkdata "${webservdatadir:?}"

# -----------------------------------------------------
# Configure our PostGIS container.
#[root@virtual]

    source "${HOME:?}/astrotrop.conf"
    cat >> "${HOME:?}/astrotrop.conf" <<- EOF

        postgisdockname=postgis
        postgisdockport=5432
        postgislinkname=postgis
        postgislinkport=5432

        postgistempdir=\${tempdir:?}/postgis
        postgisdatadir=\${datadir:?}/postgis

        postgishostname=postgis-08.\${dnsname:?}

        postgisdatabase=postgisdata
        postgisusername=postgisuser
        postgispassword=$(pwgen 20 1)

EOF

# -----------------------------------------------------
# Create our PostGIS data directories.
#[root@virtual]

    source "${HOME:?}/astrotrop.conf"
    
    rmdata "${postgistempdir:?}"
    rmdata "${postgisdatadir:?}"

    mkdata "${postgistempdir:?}"
    mkdata "${postgisdatadir:?}"

# -----------------------------------------------------
# Run our PostGIS container.
#[root@virtual]

    source "${HOME:?}/astrotrop.conf"

    postgisenv=$(mktemp)
    cat > "${postgisenv:?}" <<- EOF
PGDATA=/data/pgdata
POSTGRES_DB=${postgisdatabase:?}
POSTGRES_USER=${postgisusername:?}
POSTGRES_PASSWORD=${postgispassword:?}
EOF

    docker run \
        --detach \
        --name "${postgisdockname:?}" \
        --env-file "${postgisenv:?}" \
        --expose "${postgisdockport:?}" \
        --volume "${postgisdatadir:?}:/data" \
        --volume "${postgistempdir:?}:/temp" \
        --volume "${webservdatadir:?}:/www" \
        "astrotrop/postgis:${dockerset:?}"

# -----------------------------------------------------
# Test our PostGIS container.
#[root@virtual]

    source "${HOME:?}/astrotrop.conf"
    docker exec -it "${postgisdockname:?}" psql \
        --dbname "${postgisdatabase:?}" \
        --username "${postgisusername:?}" \
        --command "SELECT version()"

         #
         # PostgreSQL 9.4.5 on x86_64-unknown-linux-gnu, compiled by gcc (Debian 4.9.2-10) 4.9.2, 64-bit
         #

    docker exec -it "${postgisdockname:?}" psql \
        --dbname "${postgisdatabase:?}" \
        --username "${postgisusername:?}" \
        --command "SELECT postgis_full_version()"

        #
        # POSTGIS="2.2.1 r14555" GEOS="3.4.2-CAPI-1.8.2 r3921" PROJ="Rel. 4.8.0, 6 March 2012" GDAL="GDAL 1.10.1, released 2013/08/26" LIBXML="2.9.1" LIBJSON="0.11.99" TOPOLOGY RASTER
        #

# -----------------------------------------------------
# Configure our RStudio container.
#[root@virtual]

    source "${HOME:?}/astrotrop.conf"
    cat >> "${HOME:?}/astrotrop.conf" << EOF

        rstudiodockname=rstudio
        rstudiodockport=8787

        rstudiolinkname=rstudio
        rstudiolinkport=8787

        rstudiousername=astrotrop
        rstudiopassword=$(pwgen 20 1)

        rstudiohostname=rstudio-06.\${dnsname:?}
        rstudioexternal=http://\${rstudiohostname}:\${rstudiodockport}/
        rstudiointernal=http://\${rstudiolinkname}:\${rstudiolinkport}/

        rstudiotempdir=\${tempdir:?}/rstudio
        rstudiodatadir=\${datadir:?}/rstudio/data
        rstudiohomedir=\${datadir:?}/rstudio/home/

EOF

# -----------------------------------------------------
# Create our RStudio directories.
#[root@virtual]

    source "${HOME:?}/astrotrop.conf"

    rmdata "${rstudiotempdir:?}"
    rmdata "${rstudiohomedir:?}"
    rmdata "${rstudiodatadir:?}"

    mkdata "${rstudiotempdir:?}"
    mkdata "${rstudiodatadir:?}"
    mkdata "${rstudiohomedir:?}"
    mkdata "${rstudiohomedir:?}/${rstudiousername:?}"

# -----------------------------------------------------
# Run our RStudio container.
#[root@virtual]

    source "${HOME:?}/astrotrop.conf"

    rstudioenv=$(mktemp)
    cat > "${rstudioenv:?}" <<- EOF
USER=${rstudiousername:?}
PASSWORD=${rstudiopassword:?}
EOF

    cat > "${rstudiodatadir:?}/environ" <<- EOF
POSTGRES_DATABASE=${postgisdatabase:?}
POSTGRES_HOSTNAME=${postgislinkname:?}
POSTGRES_HOSTPORT=${postgislinkport:?}
POSTGRES_USERNAME=${postgisusername:?}
POSTGRES_PASSWORD=${postgispassword:?}
POSTGRES_DATANAME=PG:dbname=${postgisdatabase:?} host=${postgislinkname:?} port=${postgislinkport:?} user=${postgisusername:?} password=${postgispassword:?}
EOF

    docker run \
        --detach \
        --name "${rstudiodockname:?}" \
        --env-file "${rstudioenv:?}" \
        --link "${postgisdockname:?}:${postgislinkname:?}" \
        --volume "${rstudiotempdir:?}:/temp" \
        --volume "${rstudiodatadir:?}:/data" \
        --volume "${rstudiohomedir:?}:/home" \
        --volume "${webservdatadir:?}:/www" \
        --publish "${rstudiodockport:?}:${rstudiolinkport:?}" \
        "astrotrop/rstudio:${dockerset:?}"

# -----------------------------------------------------
# Configure our RStudio container.
#[root@virtual]

    source "${HOME:?}/astrotrop.conf"
    docker exec \
        -it \
        "${rstudiodockname:?}" \
        bash        

        #
        # Update the apt sources.
        # TODO - move to Dockerfile 
        apt-get update

        #
        # Install the RPostgreSQL package
        # TODO - move to Dockerfile 
        apt-get -y install r-cran-rpostgresql

        #
        # Install the rgdal package
        # TODO - move to Dockerfile 
        # apt-get -y install r-cran-sp
        # apt-get -y install r-cran-rgdal

        #
        # Install the R ODBC package
        # TODO - move to Dockerfile 
        apt-get -y install unixodbc
        apt-get -y install r-cran-rodbc
        apt-get -y install odbc-postgresql

        #
        # Configure the ODBC connection settings
        # http://www.uptimemadeeasy.com/linux/install-postgresql-odbc-driver-on-linux/
        # TODO Automate this as part of config()
        source /data/environ
        cat > /etc/odbc.ini << EOF
[${POSTGRES_DATABASE:?}]
Driver = /usr/lib/x86_64-linux-gnu/odbc/psqlodbcw.so 
Protocol = 9.4.5
Database = ${POSTGRES_DATABASE:?}
Servername = ${POSTGRES_HOSTNAME:?}
Username = ${POSTGRES_USERNAME:?}
Password = ${POSTGRES_PASSWORD:?}
Port     = ${POSTGRES_HOSTPORT:?}
EOF

    exit

# -----------------------------------------------------
# Configure RStudio to support PostGIS command line access.
# TODO Move to Docker file and deploy instructions.
#[root@virtual]

    source "${HOME:?}/astrotrop.conf"
    docker exec \
        -it \
        "${rstudiodockname:?}" \
        bash        

        #
        # Set the shell for the astrotrop user.
        chsh astrotrop -s /bin/bash

        #
        # Install the PostGIS client.
        # TODO - Figure out why the postgis package requires sound, video and blueray ?
        # 151 new packages, 71.0 MB of archives, 250 MB of disk space will be used.
        apt-get install --no-install-recommends postgis 
        apt-get install --no-install-recommends postgresql-client

        #
        # Install the PostgreSQL password file.
        source /data/environ 
        cat > /home/astrotrop/.pgpass << EOF
${POSTGRES_HOSTNAME:?}:*:*:${POSTGRES_USERNAME:?}:${POSTGRES_PASSWORD:?}
EOF
        chown astrotrop /home/astrotrop/.pgpass    
        chgrp astrotrop /home/astrotrop/.pgpass    
        chmod u=rw,g=,o= /home/astrotrop/.pgpass    

    exit

# -----------------------------------------------------
# Download our RStudio test data.
# TODO Move soome of this inside the container.
#[root@virtual]

    apt-get -y install wget

    apt-get -y install unzip

    source "${HOME:?}/astrotrop.conf"
    pushd "${rstudiodatadir:?}"
        if [ ! -e geostats ]
        then
            if [ ! -e geostats.zip ]
            then
                wget https://dl.dropboxusercontent.com/u/2703650/Courses/geostats/geostats.zip
            fi
            unzip geostats.zip
        fi
    popd

# -----------------------------------------------------
# Test our RStudio service.
#[user@desktop]

    firefox 'http://rstudio-08.metagrid.xyz:8787/' &

# -----------------------------------------------------
# Read the database settings from env file.
#[RStudio]

    readRenviron("/data/environ")

    dbname <- Sys.getenv("POSTGRES_DATABASE")
    dbhost <- Sys.getenv("POSTGRES_HOSTNAME")
    dbport <- Sys.getenv("POSTGRES_HOSTPORT")
    dbuser <- Sys.getenv("POSTGRES_USERNAME")
    dbpass <- Sys.getenv("POSTGRES_PASSWORD")
    pgdsn  <- Sys.getenv("POSTGRES_DATANAME")

# -----------------------------------------------------
# Load the PostgreSQL database driver,
#[RStudio]

    library(RPostgreSQL)

# -----------------------------------------------------
# Test the PostgreSQL database driver,
#[RStudio]

    drv <- dbDriver("PostgreSQL")
    con <- dbConnect(drv, dbname=dbname, host=dbhost, user=dbuser, password=dbpass)

    dbGetQuery(con, "SELECT version()")

        #
        # PostgreSQL 9.4.5 on x86_64-unknown-linux-gnu ...."
        #

    dbGetQuery(con, "SELECT postgis_full_version()")

        #
        # POSTGIS="2.2.1 r14555" GEOS="3.4.2-CAPI-1.8.2 r3921 ...."
        #

# -----------------------------------------------------
# Load the ODBC database driver.
#[RStudio]

    library(RODBC)

# -----------------------------------------------------
# Test the ODBC database driver.
#[RStudio]

    con <- odbcConnect(dbname)

    sqlQuery(con, "SELECT version()")

        #
        # PostgreSQL 9.4.5 on x86_64-unknown-linux-gnu ...."
        #

    sqlQuery(con, "SELECT postgis_full_version()")

        #
        # POSTGIS="2.2.1 r14555" GEOS="3.4.2-CAPI-1.8.2 r3921 ...."
        #

# -----------------------------------------------------
# Install the GDAL tools.
#[RStudio]

    install.packages("rgdal")

        #
        # Installing package into ‘/usr/local/lib/R/site-library’
        # ....

    library(rgdal)

        #
        # Loading required package: sp
        # rgdal: version: 1.1-3, (SVN revision 594)
        # Geospatial Data Abstraction Library extensions to R successfully loaded]
        # ....

# -----------------------------------------------------
# Loading vector data into PostGIS from R.
# https://rpubs.com/dgolicher/6373
#[RStudio]
 
    #
    # Import the shapefiles.
    states<-readOGR('/data/geostats/shapefiles','mex_states')

        #
        # OGR data source with driver: ESRI Shapefile 
        # Source: "//data/geostats/shapefiles", layer: "mex_states"
        # with 51 features
        # It has 15 fields
        #

    #
    # Plot the shape data.
    plot(states)
    box()
    axis(1)
    axis(2)
    grid()

    #
    # Export the test data to our database.
    writeOGR(
        states,
        pgdsn,
        "mexican_states",
        "PostgreSQL",
        layer_options = "geometry_name=geom"
        )

    #
    # Read the data back from our database.
    readOGR(
        pgdsn,
        "mexican_states"
        );

# -----------------------------------------------------
# Loading point data into PostGIS using R.
# https://rpubs.com/dgolicher/6373
#[RStudio]

    #
    # Import the point data.
    towns <- read.csv("/data/geostats/textfiles/MexTowns.csv")
    head(towns)

            gid                       placename    pop         x        y
        1 30669                   Ciudad Madero 197216 -97.83139 22.27639
        2 30856                        González  11212 -98.43056 22.82806
        3 30908 Estación Manuel (Úrsulo Galván)  12077 -98.31972 22.72778
        4 31450       Ciudad Gustavo Díaz Ordaz  11523 -98.59694 26.23222
        5 32155                    Ciudad Mante  84787 -98.97222 22.74250
        6 32410               Heroica Matamoros 449815 -97.50417 25.87972

    #
    # To turn this into a spatial object we just need to tell R which columns hold the coordinates.
    coordinates(towns) <- ~x + y

    # We also need to set the set the CRS.
    # In this case it is the same as the shape file that we loaded (EPSG:4326)
    proj4string(towns) <- proj4string(states)

    #
    # Export the towns to our database.
    writeOGR(
        towns,
        pgdsn,
        "mexican_towns",
        "PostgreSQL",
        layer_options = "geometry_name=geom"
        )

# -----------------------------------------------------
# Loading point data into PostGIS using command line tools from R.
# https://rpubs.com/dgolicher/6373
#[RStudio]

    #
    # Import the point data.
    oaks <- read.csv("/data/geostats/textfiles/MexOaks.csv")
    head(oaks)

    # Set the coordinate columns and CRS.
    coordinates(oaks) <- ~x + y
    proj4string(oaks) <- proj4string(states)

    #
    # Write the updated data to a shapefile.
    # TODO - Make sure the /temp directory is writeable.
    writeOGR(
        oaks,
        "shapefiles",
        "oaks",
        "ESRI Shapefile"
        )

    #
    # Use the command line shp2pgsql command to load the shapefile into the database.
    # TODO Use env variables to set the pgsql params.

    dbname <- Sys.getenv("POSTGRES_DATABASE")
    dbhost <- Sys.getenv("POSTGRES_HOSTNAME")
    dbport <- Sys.getenv("POSTGRES_HOSTPORT")
    dbuser <- Sys.getenv("POSTGRES_USERNAME")

    pgshp <- paste(
        'shp2pgsql',
        '-s',
        4326,
        '-I',
        'shapefiles/oaks.shp',
        'mexican_oaks',
        sep=' '
        )

    pgsql <- paste(
        'psql',
        '-h',
        dbhost,
        '-p',
        dbport,
        '-U',
        dbuser,
        '-d',
        dbname,
        sep=' '
        )

    command <- paste(
        pgshp,
        pgsql,
        sep=' | '
        )

    system(command)

        ....
        ....
        INSERT 0 1
        INSERT 0 1
        CREATE INDEX
        COMMIT
        ANALYZE

# -----------------------------------------------------
# Select all the oak species in the State of Chiapas, using a spatial overlay in R.
# https://rpubs.com/dgolicher/6373
#[RStudio]

    oaks$state <- over(oaks, states)$admin_name
    chisoaks <- subset(oaks, state == "Chiapas")
    chis <- subset(states, states@data$admin_name == "Chiapas")
    plot(chis)
    points(chisoaks, pch = 21, bg = 3, cex = 0.4)
    box()
    axis(1)
    axis(2)
    grid()

# -----------------------------------------------------
# Select all the oak species in the State of Chiapas, using a PostGIS spatial query.
# https://rpubs.com/dgolicher/6373
#[RStudio]

    query <- "select genus,species,st_x(o.geom) x,st_y(o.geom) y from mexican_oaks o, mexican_states s where st_intersects(o.geom,s.geom) and admin_name like 'Chiapas'"
    chisoaks <- sqlQuery(con, query)
    coordinates(chisoaks) <- ~x + y
    plot(chis)
    points(chisoaks, pch = 21, bg = 2, cex = 0.4)
    box()
    axis(1)
    axis(2)
    grid()






# -----------------------------------------------------
# Update our hosts file.
# Need to do this whenever the virtual machine is restarted.
#[root@virtual]

    source "${HOME:?}/astrotrop.conf"

    postgisdockipv4=$(docker inspect --format '{{ .NetworkSettings.IPAddress }}' ${postgisdockname:?})
    rstudiodockipv4=$(docker inspect --format '{{ .NetworkSettings.IPAddress }}' ${rstudiodockname:?})

    cat >> /etc/hosts << EOF

#
# Docker container addresses
${postgisdockipv4:?} ${postgisdockname:?}
${rstudiodockipv4:?} ${rstudiodockname:?}

EOF

# -----------------------------------------------------
# Install the PostgreSQL client.
#[root@virtual]

    apt-get install -y postgresql-client

# -----------------------------------------------------
# Create our user account.
#[root@virtual]

    username=USERNAME

    useradd \
        --create-home \
        --shell '/bin/bash' \
        "${username:?}"

# -----------------------------------------------------
# Add our AstroTROP config.
#[root@virtual]

    ln /root/astrotrop.conf "/home/${username:?}/astrotrop.conf"

# -----------------------------------------------------
# Add our SSH config.
#[root@virtual]

    su - "${username:?}"

        pushd "${HOME:?}"
        
            if [ ! -e '.ssh' ]
            then
                mkdir '.ssh'
            fi

            chown "$(id -u)"  '.ssh'
            chgrp "$(id -g)"  '.ssh'
            chmod g=,o=,u=rwx '.ssh'

            pushd '.ssh'

                if [ ! -e 'keys' ]
                then
                    mkdir 'keys'
                fi

                chown "$(id -u)"  'keys'
                chgrp "$(id -g)"  'keys'
                chmod g=,o=,u=rwx 'keys'

                pushd 'keys'

                    wget 'http://example.com/keys/public-key.pub'
                    wget 'http://example.com/keys/public-key.pub'

                popd

                for key in $(find 'keys' -name '*.pub')
                do
                    echo "${key:?}" 
                    echo "#" >> 'authorized_keys'
                    cat  "${key:?}" >> 'authorized_keys'
                done

                chown "$(id -u)"   'authorized_keys'
                chgrp "$(id -g)"   'authorized_keys'
                chmod g=r,o=r,u=rw 'authorized_keys'                
    
            popd
        popd
    exit

# -----------------------------------------------------
# Configure our PostGIS client.
#[root@virtual]

    su - "${username:?}"
    
        source "${HOME:?}/astrotrop.conf"
        cat >  "${HOME:?}/.pgpass" << EOF
${postgisdockname:?}:5432:${postgisdatabase:?}:${postgisusername:?}:${postgispassword:?}
EOF
        chmod u=rw,g=,o= "${HOME:?}/.pgpass"

    exit

# -----------------------------------------------------
# Test login to our PostGIS database.
#[root@virtual]

    su - "${username:?}"

        source "${HOME:?}/astrotrop.conf"
        psql \
            --host "${postgisdockname:?}" \
            --username "${postgisusername:?}" \
            "${postgisdatabase:?}"

            \l
            \dt
            \q

    exit

# -----------------------------------------------------
# Create a shortcut command.
#[root@virtual]

    su - "${username:?}"

        cat > "${HOME:?}/postgis.sh" << EOF
source "${HOME:?}/astrotrop.conf"
psql \
    --host "\${postgisdockname:?}" \
    --username "\${postgisusername:?}" \
    "\${postgisdatabase:?}"
EOF
        chmod u=rwx,g=,o= "${HOME:?}/postgis.sh"

    exit

# -----------------------------------------------------
# Test login using the shortcut.
#[root@virtual]

    su - "${username:?}"

        source astrotrop.conf
        ./postgis.sh

        \l
        \dt
        \q

# -----------------------------------------------------
# Check we can login via SSH.
#[user@desktop]

    ssh USERNAME@postgis-08.metagrid.xyz

# -----------------------------------------------------
# Create our SSH tunnel config.
#[user@desktop]

    gedit "${HOME:?}/.ssh/config" &

    +   Host astrotrop-postgis-08
    +       User USERNAME
    +       PasswordAuthentication no
    +       HostName postgis-08.metagrid.xyz
    +       IdentityFile ~/.ssh/PRIVATE-KEY
    +       LocalForward 5432 postgis:5432


# -----------------------------------------------------
# Run the SSH tunnel.
#[user@desktop]

    ssh astrotrop-postgis-08

# -----------------------------------------------------
# Check we can login to PostgreSQL using the tunnel.
#[user@desktop]

    psql \
        --host localhost \
        --username "postgisuser" \
        "postgisdata"










# -----------------------------------------------------
# Configure our GeoServer container.
#[root@virtual]

    source "${HOME:?}/astrotrop.conf"
    cat >> "${HOME:?}/astrotrop.conf" << EOF

        geoservdockname=geoserv
        geoservdockport=8080

        geoservlinkname=geoserv
        geoservlinkport=8080

        geoservhostname=geoserv-06.\${dnsname:?}
        geoservexternal=http://\${geoservhostname:?}:\${geoservdockport:?}/geoserver/
        geoservinternal=http://\${geoservlinkname:?}:\${geoservlinkport:?}/geoserver/

        geoservadminname=admin
        geoservadminpass=$(pwgen 20 1)

        geoservusername=astrotrop
        geoservpassword=$(pwgen 20 1)

        geoservtempdir=\${tempdir:?}/geoserv
        geoservdatadir=\${datadir:?}/geoserv

EOF

# -----------------------------------------------------
# Create our GeoServer data directories.
#[root@virtual]

    source "${HOME:?}/astrotrop.conf"
    
    rmdata "${geoservtemp:?}"
    rmdata "${geoservdata:?}"

    mkdata "${geoservtemp:?}" "${tomcatuid:?}"
    mkdata "${geoservdata:?}" "${tomcatuid:?}"

# -----------------------------------------------------
# Run our GeoServer container.
#[root@virtual]

    source "${HOME:?}/astrotrop.conf"

    geoservenv=$(mktemp)
    cat > "${geoservenv:?}" <<- EOF
# TODO GeoServer admin user and pass
# TODO PostGIS host, user and pass
EOF

    docker run \
        --detach \
        --name "${geoservdockname:?}" \
        --env-file "${geoservenv:?}" \
        --link "${postgisdockname:?}:${postgislinkname:?}" \
        --publish "${geoservdockport:?}:${geoservlinkport:?}" \
        --volume "${geoservtempdir:?}:/temp" \
        --volume "${geoservdatadir:?}:/data" \
        --volume "${webservdatadir:?}:/www" \
        "astrotrop/geoserver:${dockerset:?}"

    docker logs -f "${geoservdockname:?}"

# -----------------------------------------------------
# Test our GeoServer service.
#[user@desktop]

    firefox 'http://geoserv-08.metagrid.xyz:8080/geoserver/web/' &

# -----------------------------------------------------
# Configure our GeoServer login.
#[root@virtual]

    #
    # We can add the account - but the password encryption is wrong.
    # Still need to login as admin and set the password manually.
    pushd "${geoservdata:?}"

        vi "security/usergroup/default/users.xml"

            <?xml version="1.0" encoding="UTF-8" standalone="no"?>
            <userRegistry xmlns="http://www.geoserver.org/security/users" version="1.0">

                <users>
                    <user enabled="true" name="admin" password="crypt1:pQMeDtOfDWLUQSIl4QyqRNe8ptXxnr+3"/>
        +           <!-- astrotrop-08 -->
        +           <user enabled="true" name="astrotrop" password="crypt1:9pwQYsAwpkaRSOKGyNAGf1OjdkN0bTsFqZXDVeMFMiM="/>
                </users>
                <groups/>
            </userRegistry>

        vi "security/role/default/roles.xml"

            <userList>
                <userRoles username="admin">
                    <roleRef roleID="ADMIN"/>
                </userRoles>
        +       <userRoles username="astrotrop">
        +           <roleRef roleID="ADMIN"/>
        +           <roleRef roleID="GROUP_ADMIN"/>
        +       </userRoles>
            </userList>


# -----------------------------------------------------
# Test our GeoServer service.
#[user@desktop]

    firefox 'http://geoserv-06.metagrid.xyz:8080/geoserver/web/' &

# -----------------------------------------------------
# Create a GeoServer layer from our PostGIS data.
#[GeoServer]

    New workspace

        name : AstroTROP
        namespace : http://www.astrotrop.org/
        default : true

    New (vector) data store

        workspace : AstroTROP

        name : PostGIS database
        text : PostGIS database

        type : postgis (default)
        host : postgis (from the Docker link name) 
        port : 5432
        database : postgisdata (from the Docker config) 
        schema : public
        user : postgisuser (from the Docker config) 
        pass : ############### (from the Docker config) 

    New (layer) resource
    
        from   : AstroTROP:PostGIS
        layer  : mexican_states
        action : publish

   Edit layer
   
        name  : MexicanStates   <-- no space
        title : Mexican States  <-- space ok

        Native Bounding Box
        (compute from data)

        Lat/Lon Bounding Box
        (compute from data)

# -----------------------------------------------------
# Create a new style and add it to our layer.
# http://docs.geoserver.org/stable/en/user/styling/sld-cookbook/index.html
#[GeoServer]

    <?xml version="1.0" encoding="ISO-8859-1"?>
    <StyledLayerDescriptor version="1.0.0" 
        xsi:schemaLocation="http://www.opengis.net/sld StyledLayerDescriptor.xsd" 
        xmlns="http://www.opengis.net/sld" 
        xmlns:ogc="http://www.opengis.net/ogc" 
        xmlns:xlink="http://www.w3.org/1999/xlink" 
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

        <NamedLayer>
            <Name>Polygon outline</Name>
            <UserStyle>
                <Title>Polygon outline style</Title>
                <Abstract>A simple style that just displays a black outline</Abstract>

                <FeatureTypeStyle>
                    <!--FeatureTypeName>Feature</FeatureTypeName-->
                    <Rule>
                        <Name>Rule 1</Name>
                        <Title>Black outline</Title>
                        <Abstract>1 pixel black outline</Abstract>

                        <PolygonSymbolizer>
                            <!--Fill>
                                <CssParameter name="fill">#AAAAAA</CssParameter>
                            </Fill-->
                            <Stroke>
                                <CssParameter name="stroke">#000000</CssParameter>
                                <CssParameter name="stroke-width">1</CssParameter>
                                <CssParameter name="stroke-opacity">0.5</CssParameter>
                            </Stroke>
                        </PolygonSymbolizer>
                    </Rule>
                </FeatureTypeStyle>
            </UserStyle>
        </NamedLayer>
    </StyledLayerDescriptor>

# -----------------------------------------
# Add the CSW plugin to our GeoServer.
# TODO - add this to the GeoServer Dockerfile
#[root@virtual]

    source "${HOME:?}/astrotrop.conf"
    docker exec \
        -it \
        -u root \
        "${geoservdockname:?}" \
        bash        

        #
        # Install download tools
        dnf -y install wget
        dnf -y install unzip

        #
        # Download and unzip the zipfile.
        zipfile=geoserver-${GEOSERVER_VERSION:?}-csw-plugin.zip
        zippath=/temp/${zipfile:?}
        
        wget -O "${zippath:?}" "http://sourceforge.net/projects/geoserver/files/GeoServer/${GEOSERVER_VERSION}/extensions/${zipfile:?}/download"

        unzipped=/temp/csw-plugin
        unzip \
            "${zippath:?}" \
            -d "${unzipped:?}"

        #
        # Copy the jar files into our webapp.        
        for jarfile in $(ls ${unzipped:?}/*.jar)
        do
            cp --verbose --no-clobber \
                "${jarfile:?}" \
                "${TOMCAT_ROOT}/webapps/${GEOSERVER_CONTEXT}/WEB-INF/lib"
        done

        #
        # Remove the zipfiles.
        rm -rf "${unzipped:?}"
        rm -rf "${zippath:?}"

    exit
    
# -----------------------------------------
# Restart our GeoServer container.
#[root@virtual]

    source "${HOME:?}/astrotrop.conf"
    docker stop  "${geoservdockname:?}"
    docker start "${geoservdockname:?}"

    docker logs -f "${geoservdockname:?}"

# -----------------------------------------------------
# Save our GeoServer master password.
#[root@virtual]

    mv "${geoservdata:?}/security/masterpw.info" "${HOME:?}"



# -----------------------------------------------------
# Grant CREATE DATABASE permissions on PostGIS database.
#[root@virtual]

    source "${HOME:?}/astrotrop.conf"
    docker exec -it "${postgisdockname:?}" psql \
        --dbname "${postgisdatabase:?}" \
        --username "${postgisusername:?}"

        ALTER USER postgisuser CREATEDB;

        \q

    source "${HOME:?}/astrotrop.conf"
    docker exec -it "${postgisdockname:?}" psql \
        --dbname "${postgisdatabase:?}" \
        --username "${postgisusername:?}"

        ALTER USER postgisuser CREATEDB;
        ALTER USER postgisuser CREATEROLE;
        ALTER USER postgisuser SUPERUSER;

        \q











