#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2015, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

# -------------------------------------------------------------------------------------------
# Start a new VM.
#[root@desktop]

    ischnura-createvm 

        INFO : Node name [omicron]
        INFO : Base name [fedora-21-base-20150317.qcow]
        INFO : Disc name [omicron.qcow]
        INFO : Disc size [8G]

# -----------------------------------------
# Install genric admin tools.
#[root@virtual]

    yum -y install htop
    yum -y install pwgen
    
# -----------------------------------------------------
# Install and start the HAVEGE entropy generator.
# http://redmine.roe.ac.uk/issues/828
# http://blog-ftweedal.rhcloud.com/2014/05/more-entropy-with-haveged/
# http://stackoverflow.com/questions/26021181/not-enough-entropy-to-support-dev-random-in-docker-containers-running-in-boot2d/
#[root@virtual]

    yum install -y haveged
    systemctl enable haveged.service
    systemctl start  haveged.service

# -----------------------------------------------------
# Install and run Docker.
#[root@virtual]

    yum -y install docker-io

    systemctl enable docker.service
    systemctl start  docker.service
    systemctl status docker.service

# -------------------------------------------------------------------------------------------
# Run the CKAN containers.
#[root@virtual]

    #
    # Run CKAN
    docker run -d --name db   ckan/postgresql
    docker run -d --name solr ckan/solr
    docker run -d --name ckan -p 80:80 --link db:db --link solr:solr ckan/ckan

    docker logs -f ckan

        *** Running /etc/my_init.d/50_configure...
        Distribution already installed:
          ckan 2.5.0a from /usr/lib/ckan/default/src/ckan
        Creating /etc/ckan/default/ckan.ini

        ....
        ....

        *** Running /etc/my_init.d/70_initdb...
        Traceback (most recent call last):
          File "/usr/lib/ckan/default/bin/paster", line 9, in <module>
            load_entry_point('PasteScript==1.7.5', 'console_scripts', 'paster')()
          File "/usr/lib/ckan/default/local/lib/python2.7/site-packages/paste/script/command.py", line 104, in run
            invoke(command, command_name, options, args[1:])
          File "/usr/lib/ckan/default/local/lib/python2.7/site-packages/paste/script/command.py", line 143, in invoke
          ....
          ....
          File "/usr/lib/ckan/default/src/ckan/ckan/plugins/core.py", line 116, in plugins_update
            environment.update_config()
          File "/usr/lib/ckan/default/src/ckan/ckan/config/environment.py", line 316, in update_config
            search.check_solr_schema_version()
          File "/usr/lib/ckan/default/src/ckan/ckan/lib/search/__init__.py", line 306, in check_solr_schema_version
            % (version, ', '.join(SUPPORTED_SCHEMA_VERSIONS)))
        ckan.lib.search.common.SearchError: SOLR schema version not supported: 2.0. Supported versions are [2.3]
        *** /etc/my_init.d/70_initdb failed with status 1

        *** Killing all processes...

# -------------------------------------------------------------------------------------------
# Run bash in the CKAN container and extract the 2.3 schema. 
#[root@virtual]

    #
    # Create temp directory and allow Docker to access it.
    temp=$(mktemp -d)
    chcon -t svirt_sandbox_file_t "${temp:?}" 

    docker run -it --rm \
        --volume ${temp}:/temp \
        ckan/ckan /bin/bash

        cp ${CKAN_HOME:?}/src/ckan/ckan/config/solr/schema.xml \
            /temp/schema-2.3.xml

        exit

    #
    # ADD the schema to a new SOLR container.
    cat > "${temp:?}/Dockerfile" << EOF
FROM ckan/solr
MAINTAINER Dave Morris <docker-admin@metagrid.co.uk>
COPY schema-2.3.xml /opt/solr/example/solr/ckan/conf/schema.xml
EOF

    docker build --tag ckan/solr23 ${temp:?}

# -------------------------------------------------------------------------------------------
# Run our CKAN containers.
#[root@virtual]

    docker rm $(docker stop $(docker ps -aq))

    #
    # Run CKAN dependencies.
    docker run -d --name db ckan/postgresql
    docker run -d --name solr ckan/solr23

    #
    # Sleep to give SOLR time to start.
    sleep 10

    #
    # Run CKAN.
    docker run -d --name ckan -p 80:80 --link db:db --link solr:solr ckan/ckan
    docker logs -f ckan

# -------------------------------------------------------------------------------------------
# Execute a shell in the CKAN container.
#[root@virtual]

    docker exec -it ckan bash

    # Do we need this ?
    # source "${CKAN_HOME:?}/bin/activate"

    pushd "${CKAN_HOME:?}"
        pushd src/ckan

            CKAN_INI="${CKAN_CONFIG:?}/ckan.ini"

            paster \
                user list \
                -c "${CKAN_INI:?}"

            paster \
                sysadmin add zarquan \
                -c "${CKAN_INI:?}"

        popd
    popd

# -------------------------------------------------------------------------------------------
# TODO : Install DataStore .... 
#[root@virtual]

    #
    # Need DataStore
    https://github.com/ckan/ckan/blob/master/doc/maintaining/datastore.rst



