#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2015, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

# -----------------------------------------------------
# Configure our machine.
#[user@desktop]

    sed -i 'xxx d' ~/.ssh/known_hosts
    sed -i '170 d' ~/.ssh/known_hosts

    ssh -o PasswordAuthentication=yes -o PubkeyAuthentication=no root@greenfinch

        wget http://data.metagrid.co.uk/sshkeys/install.txt
        source install.txt
        
        sed -i '
            s/^PasswordAuthentication.*/PasswordAuthentication no/
            ' /etc/ssh/sshd_config

        systemctl restart  sshd.service

        hostname greenfinch

        exit

    ssh root@greenfinch

# -----------------------------------------
# Install admin tools.
#[root@virtual]

    yum -y install htop
    yum -y install pwgen
    
# -----------------------------------------------------
# Install and start the HAVEGE entropy generator.
# http://redmine.roe.ac.uk/issues/828
# http://blog-ftweedal.rhcloud.com/2014/05/more-entropy-with-haveged/
# http://stackoverflow.com/questions/26021181/not-enough-entropy-to-support-dev-random-in-docker-containers-running-in-boot2d/
#[root@virtual]

    yum install -y haveged
    systemctl enable haveged.service
    systemctl start  haveged.service

# -----------------------------------------------------
# Install and run Docker.
#[root@virtual]

    yum -y install docker-io
    systemctl enable docker.service
    systemctl start  docker.service
    systemctl status docker.service

# -----------------------------------------------------
# Configure our build.
#[root@virtual]

    cat >> "${HOME:?}/astrotrop.conf" << EOF

        #
        # Local settings
        project=/var/local/projects/astrotrop
        tempdir=\${project:?}/temp
        datadir=\${project:?}/data
EOF

    source "${HOME:?}/astrotrop.conf"

# -----------------------------------------------------
# Checkout our source code.
#[root@virtual]

    mkdir --parent ${tempdir:?}
    mkdir --parent ${datadir:?}

    yum -y install git
    pushd ${project:?}
        git clone https://github.com/astrotrop/astrotrop.git github
    popd

# -----------------------------------------------------
# Build our base containers.
#[root@virtual]

    pushd ${project:?}/github
        pushd src/docker/ckan

            docker build \
                --tag astrotrop/fedora \
                base/fedora

            docker build \
                --tag astrotrop/fedora-apache \
                base/fedora-apache

        popd
    popd

# -----------------------------------------------------
# Build our Redis container.
#[root@virtual]

    pushd ${project:?}/github
        pushd src/docker/ckan

            docker build \
                --tag astrotrop/redis \
                redis

        popd
    popd

# -----------------------------------------------------
# Build our SOLR container.
#[root@virtual]

    pushd ${project:?}/github
        pushd src/docker/ckan

            docker build \
                --tag astrotrop/solr \
                solr

        popd
    popd

# -----------------------------------------------------
# Build our PostgreSQL container.
#[root@virtual]

    pushd ${project:?}/github
        pushd src/docker/ckan

            docker build \
                --tag astrotrop/postgres \
                postgres

        popd
    popd

# -----------------------------------------------------
# Build our DataPusher container.
#[root@virtual]

    pushd ${project:?}/github
        pushd src/docker/ckan

            docker build \
                --tag astrotrop/push \
                push

        popd
    popd

# -----------------------------------------------------
# Build our CKAN container.
#[root@virtual]

    pushd ${project:?}/github
        pushd src/docker/ckan

            docker build \
                --tag astrotrop/ckan \
                ckan

        popd
    popd

# -----------------------------------------------------
# Run our SOLR container.
#[user@desktop]

    cat >> "${HOME:?}/astrotrop.conf" << EOF

        solrname=solrname
        solrlink=solrlink

        solrdata=${datadir:?}/solr
        solrtemp=${tempdir:?}/solr
EOF

    source "${HOME:?}/astrotrop.conf"

    docker run \
        --detach \
        --expose 8983 \
        --name   "${solrname:?}" \
        --volume "${solrtemp:?}:/temp" \
        --volume "${solrdata:?}:/opt/solr/example/solr/ckan/data" \
        astrotrop/solr

# -----------------------------------------------------
# Run our Redis container.
#[user@desktop]

    cat >> "${HOME:?}/astrotrop.conf" << EOF

        redislink=redislink
        redisname=redisname

        redisdata=${datadir:?}/redis
        redistemp=${tempdir:?}/redis
EOF

    source "${HOME:?}/astrotrop.conf"

    docker run \
        --detach \
        --expose 8983 \
        --name   "${redisname:?}" \
        --volume "${redistemp:?}:/temp" \
        astrotrop/redis

# -----------------------------------------------------
# Run our PostgreSQL container.
#[user@desktop]

    cat >> "${HOME:?}/astrotrop.conf" << EOF

        postname=postname
        postlink=postlink

        postdata=${datadir:?}/postgres
        posttemp=${tempdir:?}/postgres

        postpass=postpass
EOF

    source "${HOME:?}/astrotrop.conf"

    docker run \
        --detach \
        --expose 5432 \
        --name   "${postname:?}" \
        --volume "${posttemp:?}:/temp" \
        --volume "${postdata:?}:/var/lib/postgresql/data" \
        --env POSTGRES_PASSWORD=${postpass:?} \
        astrotrop/postgres

    sleep 20

# -----------------------------------------------------
# Create our (empty) CKAN database.
#[user@desktop]

    cat >> "${HOME:?}/astrotrop.conf" << EOF

        ckandatabase=ckandatabase
        ckanrole=ckanrole
        ckanpass=ckanpass
EOF

    source "${HOME:?}/astrotrop.conf"

    cat > ${posttemp:?}/ckan-init.sql << EOF

        CREATE ROLE ${ckanrole:?} WITH 
            PASSWORD '${ckanpass:?}'
            NOSUPERUSER
            NOCREATEDB
            NOCREATEROLE
            LOGIN
            ;

        CREATE DATABASE ${ckandatabase:?} WITH
            OWNER = ${ckanrole:?}
            ;
EOF
    
    docker exec -it "${postname:?}" psql postgres postgres

        \i /temp/ckan-init.sql
        \q

# -----------------------------------------------------
# Create our DataStore database.
# http://docs.ckan.org/en/master/datastore-setup.html
#[user@desktop]

    cat >> "${HOME:?}/astrotrop.conf" << EOF

        storedatabase=storedatabase

        storeowner=storeowner
        storeownerpass=storeownerpass

        storereader=storereader
        storereaderpass=storereaderpass

        storewriter=storewriter
        storewriterpass=storewriterpass

EOF

    source "${HOME:?}/astrotrop.conf"

    cat > ${posttemp:?}/store-init.sql << EOF

        --
        -- Create our database roles.
        CREATE ROLE ${storeowner:?} WITH 
            PASSWORD '${storeownerpass:?}'
            NOSUPERUSER
            NOCREATEDB
            NOCREATEROLE
            NOLOGIN
            ;

        CREATE ROLE ${storereader:?} WITH 
            PASSWORD '${storereaderpass:?}'
            NOSUPERUSER
            NOCREATEDB
            NOCREATEROLE
            LOGIN
            ;

        CREATE ROLE ${storewriter:?} WITH 
            PASSWORD '${storewriterpass:?}'
            NOSUPERUSER
            NOCREATEDB
            NOCREATEROLE
            LOGIN
            ;

        --
        -- Create our database.
        CREATE DATABASE ${storedatabase:?} WITH
            OWNER = ${storeowner:?}
            TEMPLATE = template0
            ENCODING = 'UTF-8'
            ;

EOF

    cat > ${posttemp:?}/store-grant.sql << EOF

        --
        -- Revoke permissions for the public role.
        REVOKE CREATE ON SCHEMA public FROM PUBLIC;
        REVOKE USAGE  ON SCHEMA public FROM PUBLIC;

        --
        -- Grant permissions for the ckanuser role.
        GRANT CREATE ON SCHEMA public TO "${ckanrole:?}";
        GRANT USAGE  ON SCHEMA public TO "${ckanrole:?}";

        --
        -- Grant permissions for the storewriter role.
        GRANT CREATE ON SCHEMA public TO "${storewriter:?}";
        GRANT USAGE  ON SCHEMA public TO "${storewriter:?}";

        --
        -- Prevent storereader connecting to the ckan database.  
        REVOKE CONNECT ON DATABASE "${ckandatabase:?}" FROM "${storereader:?}";

        --
        -- Grant connect and select permissions to the storereader role.
        GRANT CONNECT ON DATABASE "${storedatabase:?}" TO "${storereader:?}";
        GRANT USAGE   ON SCHEMA public TO "${storereader:?}";

        --
        -- Grant access to current tables to the storereader role.
        GRANT SELECT ON ALL TABLES IN SCHEMA public TO "${storereader:?}";

        --
        -- Grant access to new tables created by storewriter to storereader.
        ALTER DEFAULT PRIVILEGES FOR USER "${storewriter:?}" IN SCHEMA public
            GRANT SELECT ON TABLES TO "${storereader:?}";

EOF

    docker exec -it "${postname:?}" psql postgres postgres

        \i /temp/store-init.sql
        \q

    docker exec -it "${postname:?}" psql "${storedatabase:?}" postgres

        \i /temp/store-grant.sql
        \q

# -----------------------------------------------------
# Configure the PostGIS database extensions.
# http://docs.ckan.org/projects/ckanext-spatial/en/latest/install.html#install-postgis-and-system-packages
#[user@desktop]

    source "${HOME:?}/astrotrop.conf"

    #
    # Create the spatial tables and functions.
    docker exec -it "${postname:?}" psql \
        --dbname "${ckandatabase:?}" \
        --username "postgres" \
        --file /usr/share/postgresql/9.4/contrib/postgis-2.1/postgis.sql

    docker exec -it "${postname:?}" psql \
        --dbname "${ckandatabase:?}" \
        --username "postgres" \
        --file /usr/share/postgresql/9.4/contrib/postgis-2.1/spatial_ref_sys.sql

    docker exec -it "${postname:?}" psql \
        --dbname "${ckandatabase:?}" \
        --username "postgres" \
        --file /usr/share/postgresql/9.4/contrib/postgis-2.1/rtpostgis.sql

    docker exec -it "${postname:?}" psql \
        --dbname "${ckandatabase:?}" \
        --username "postgres" \
        --file /usr/share/postgresql/9.4/contrib/postgis-2.1/topology.sql

    #
    # Update the spatial table owner.
    docker exec -it "${postname:?}" psql \
        --dbname "${ckandatabase:?}" \
        --username "postgres" \
        --command "ALTER VIEW geometry_columns OWNER TO ${ckanrole:?}"

    docker exec -it "${postname:?}" psql \
        --dbname "${ckandatabase:?}" \
        --username "postgres" \
        --command "ALTER TABLE spatial_ref_sys OWNER TO ${ckanrole:?}"

    #
    # Check to see if PostGIS is healthy.
    docker exec -it "${postname:?}" psql \
        --dbname "${ckandatabase:?}" \
        --username "${ckanrole:?}" \
        --command "SELECT postgis_full_version()"

    #
    # Expected POSTGIS="2.1.2 r12389" GEOS="3.4.2-CAPI-1.8.2 r3921" PROJ="Rel. 4.8.0, 6 March 2012" GDAL="GDAL 1.10.1, released 2013/08/26" LIBXML="2.9.1" LIBJSON="UNKNOWN" RASTER
    # Actual   POSTGIS="2.1.7 r13414" GEOS="3.4.2-CAPI-1.8.2 r3921" PROJ="Rel. 4.8.0, 6 March 2012" GDAL="GDAL 1.10.1, released 2013/08/26" LIBXML="2.9.1" LIBJSON="UNKNOWN" RASTER

# -----------------------------------------------------
# Run our DataPusher container.
#[user@desktop]

    cat >> "${HOME:?}/astrotrop.conf" << EOF

        pushname=pushname
        pushlink=pushlink
        pushtemp=${tempdir:?}/push

EOF

    source "${HOME:?}/astrotrop.conf"

    docker run \
        --detach \
        --name "${pushname:?}" \
        --volume "${pushtemp:?}:/temp" \
        astrotrop/push

# -----------------------------------------------------
# Run our CKAN container.
#[user@desktop]

    cat >> "${HOME:?}/astrotrop.conf" << EOF

        ckanname=ckanname
        ckanlink=ckanlink

        ckandata=${datadir:?}/ckan
        ckantemp=${tempdir:?}/ckan
EOF

    source "${HOME:?}/astrotrop.conf"

    docker run \
        --detach \
        --publish 80:80 \
        --name "${ckanname:?}" \
        --link ${postname:?}:${postlink:?} \
        --link ${solrname:?}:${solrlink:?} \
        --link ${pushname:?}:${pushlink:?} \
        --link ${redisname:?}:${redislink:?} \
        --volume "${ckantemp:?}:/temp" \
        --volume "${ckandata:?}:/var/lib/ckan" \
        astrotrop/ckan

# -----------------------------------------------------
# Initialise our CKAN storage.
#[user@desktop]

    source "${HOME:?}/astrotrop.conf"

    docker exec -it "${ckanname:?}" bash

# Need to update this after the run, because the directory is mounted as a volume ?

        mkdir --parent "${ckandata:?}/storage"
        mkdir --parent "${ckandata:?}/resources"

        chown -R apache "${ckandata:?}"
        chgrp -R apache "${ckandata:?}"
        chmod -R o=rwxs "${ckandata:?}"
        chmod -R g=wrxs "${ckandata:?}"

        exit

# -----------------------------------------------------
# Create our CKAN database.
#[user@desktop]

    source "${HOME:?}/astrotrop.conf"

    docker exec -it "${ckanname:?}" bash

        paster --plugin ckan db init \
            -c "${ckanconf:?}/ckan.ini"
        exit

# -----------------------------------------------------
# Tail the SOLR logs
#[user@desktop]

    source "${HOME:?}/astrotrop.conf"

    docker exec -it "${solrname:?}" \
        tail -f /opt/solr/example/logs/solr.log

# -----------------------------------------------------
# Tail the DataPusher logs
#[user@desktop]

    source "${HOME:?}/astrotrop.conf"

    docker exec -it "${pushname:?}" \
        tail -f /var/log/httpd/push.metagrid.co.uk.error.log

# -----------------------------------------------------
# Tail the CKAN logs
#[user@desktop]

    source "${HOME:?}/astrotrop.conf"

    docker exec -it "${ckanname:?}" \
        tail -f /var/log/httpd/ckan.metagrid.co.uk.error.log

# -----------------------------------------------------
# Configure our admin user
#[user@desktop]

    source "${HOME:?}/astrotrop.conf"

    docker exec -it "${ckanname:?}" bash

        paster --plugin ckan sysadmin add zarquan \
            -c "${ckanconf:?}/ckan.ini"

            # Create new user: zarquan? [y/n]
            # Password: 
            # Confirm password: 

        exit

# -----------------------------------------------------
# MOVE TO DOCKER
# Install the CKAN harvest extension
# https://github.com/ckan/ckanext-harvest
#[user@desktop]

    source "${HOME:?}/astrotrop.conf"

    docker exec -it "${ckanname:?}" bash
        pushd "${ckanroot:?}"

            pip install -e git+https://github.com/ckan/ckanext-harvest.git#egg=ckanext-harvest
            pip install -r src/ckanext-harvest/pip-requirements.txt

        popd
    exit

# -----------------------------------------------------
# MOVE TO DOCKER
# Configure the harvest plugins.
# https://github.com/ckan/ckanext-harvest
#[user@desktop]

    source "${HOME:?}/astrotrop.conf"
    docker exec -it "${ckanname:?}" bash

        vi "${ckanconf:?}/ckan.ini"

            ## Plugins Settings
        -   ckan.plugins = ....
        +   ckan.plugins = .... harvest ckan_harvester

        +   ## Harvester settings
        +   # Set the harvester type.
        +   ckan.harvest.mq.type = redis
        +
        +   # Configure the Redis connection.
        +   ckan.harvest.mq.hostname=redislink
        +   ckan.harvest.mq.port=6379
        +   ckan.harvest.mq.redis_db=0

    exit

# -----------------------------------------------------
# Create the harvester tables.
# https://github.com/ckan/ckanext-harvest
#[user@desktop]

    source "${HOME:?}/astrotrop.conf"
    docker exec -it "${ckanname:?}" bash

        paster --plugin=ckanext-harvest harvester initdb \
            -c "${ckanconf:?}/ckan.ini"

    exit

# -----------------------------------------------------
# MOVE TO DOCKER
# Install the CKAN spatial extension
# http://docs.ckan.org/projects/ckanext-spatial/en/latest/install.html#install-the-extension
#[user@desktop]

    source "${HOME:?}/astrotrop.conf"

    docker exec -it "${ckanname:?}" bash

        #
        # Install the dependencies.
        # https://stackoverflow.com/questions/6504810/how-to-install-lxml-on-ubuntu
        # https://stackoverflow.com/questions/15759150/src-lxml-etree-defs-h931-fatal-error-libxml-xmlversion-h-no-such-file-or-di

        dnf -y install python-devel
        dnf -y install libxml-devel
        dnf -y install libxml2-devel
        dnf -y install libxslt-devel
        dnf -y install geos

        pushd "${ckanroot:?}"

            pip install -e "git+https://github.com/okfn/ckanext-spatial.git#egg=ckanext-spatial"
            pip install -r src/ckanext-spatial/pip-requirements.txt

        popd

        #
        # Warning - gcc may run out of memory duirng the build.
        # Needed to stop the other docker containers to enable this to complete.
        # Error: open CFI at the end of file; missing .cfi_endproc directive
        #

    exit

# -----------------------------------------------------
# Create the dataset extent table
# http://docs.ckan.org/projects/ckanext-spatial/en/latest/install.html#configuration
#[user@desktop]

    source "${HOME:?}/astrotrop.conf"
    docker exec -it "${ckanname:?}" bash

        paster --plugin=ckanext-spatial spatial initdb \
            -c "${ckanconf:?}/ckan.ini"

    exit

# -----------------------------------------------------
# MOVE TO DOCKER
# Enable the spatial plugins.
# http://docs.ckan.org/projects/ckanext-spatial/en/latest/install.html#configuration
#[user@desktop]

    source "${HOME:?}/astrotrop.conf"
    docker exec -it "${ckanname:?}" bash

        vi "${ckanconf:?}/ckan.ini"

        -   ckan.plugins = stats text_view image_view recline_view datastore datapusher
        +   ckan.plugins = stats text_view image_view recline_view datastore datapusher spatial_metadata spatial_query

        +   # Spatial metadata EPSG code
        +   # http://docs.ckan.org/projects/ckanext-spatial/en/latest/install.html#configuration
        +   # ckan.spatial.srid = 4326

        +   # Spatial search backend
        +   # http://docs.ckan.org/projects/ckanext-spatial/en/latest/spatial-search.html#choosing-a-backend-for-the-spatial-search
        +   ckanext.spatial.search_backend = solr

    exit

# -----------------------------------------------------
# MOVE TO DOCKER
# Update our SOLR schema.
# http://docs.ckan.org/projects/ckanext-spatial/en/latest/spatial-search.html#choosing-a-backend-for-the-spatial-search
#[user@desktop]

    source "${HOME:?}/astrotrop.conf"
    docker exec -it "${solrname:?}" bash

        vi /opt/solr/example/solr/ckan/conf/schema.xml

        +       <field name="bbox_area" type="float" indexed="true" stored="true" />
        +       <field name="maxx" type="float" indexed="true" stored="true" />
        +       <field name="maxy" type="float" indexed="true" stored="true" />
        +       <field name="minx" type="float" indexed="true" stored="true" />
        +       <field name="miny" type="float" indexed="true" stored="true" />
            </fields>

    exit

# -----------------------------------------------------
# MOVE TO DOCKER
# Add the spatial search widget.
# http://docs.ckan.org/projects/ckanext-spatial/en/latest/spatial-search.html#spatial-search-widget
#[user@desktop]

    source "${HOME:?}/astrotrop.conf"
    docker exec -it "${ckanname:?}" bash

    vi "${ckanroot:?}/src/ckan/ckan/templates/package/search.html"

        {% block secondary_content %}
    +
    +       {% snippet "spatial/snippets/spatial_query.html" %}
    +
        ....    
        {% endblock %}    

# -----------------------------------------------------
# MOVE TO DOCKER
# Add the data extent map.
# http://docs.ckan.org/projects/ckanext-spatial/en/latest/spatial-search.html#dataset-extent-map
#[user@desktop]

    source "${HOME:?}/astrotrop.conf"
    docker exec -it "${ckanname:?}" bash

    vi "${ckanroot:?}/src/ckan/ckan/templates/package/read_base.html"

        {% block secondary_content %}
        +   {% set dataset_extent = h.get_pkg_dict_extra(c.pkg_dict, 'spatial', '') %}
        +   {% if dataset_extent %}
        +       {% snippet "spatial/snippets/dataset_map_sidebar.html", extent=dataset_extent %}
        +   {% endif %}
        ....    
        {% endblock %}    


# -----------------------------------------------------
# MOVE TO DOCKER
# Configure the spatial harvest plugins.
# http://docs.ckan.org/projects/ckanext-spatial/en/latest/harvesters.html
#[user@desktop]

    source "${HOME:?}/astrotrop.conf"
    docker exec -it "${ckanname:?}" bash

        vi "${ckanconf:?}/ckan.ini"

            ## Plugins Settings
        -   ckan.plugins = ....
        +   ckan.plugins = .... csw_harvester waf_harvester doc_harvester

# -----------------------------------------------------
# MOVE TO DOCKER
# Install the GeoNetwork harvester.
# https://github.com/geosolutions-it/ckanext-geonetwork
# http://demo.geo-solutions.it/share/linea_comune/doc/online/install/install_ckan_otherext.html
#[user@desktop]

    source "${HOME:?}/astrotrop.conf"
    docker exec -it "${ckanname:?}" bash

        pushd src
            git clone https://github.com/geosolutions-it/ckanext-geonetwork.git

            pushd ckanext-geonetwork
           
                python setup.py develop
            popd

        vi "${ckanconf:?}/ckan.ini"

            ## Plugins Settings
        -   ckan.plugins = ....
        +   ckan.plugins = .... geonetwork_harvester

# -----------------------------------------------------
# Restart our containers.
#[user@desktop]

    source "${HOME:?}/astrotrop.conf"

    docker stop "${ckanname:?}"
    docker stop "${solrname:?}"
    docker stop "${pushname:?}"
    docker stop "${postname:?}"

    docker start "${solrname:?}"
    docker start "${pushname:?}"
    docker start "${postname:?}"
    docker start "${ckanname:?}"

# -----------------------------------------------------
# Import our example data
#[user@desktop]

    Converted xls file
    https://github.com/astrotrop/astrotrop/raw/master/src/docker/ckan/test/data/jenifer.001.xls
    https://github.com/astrotrop/astrotrop/raw/master/docs/papers/carbon-density/Amazon_forest_biomass_Dataset_From_Mitchard_et_al_2014.xls

    #
    # GeoJSON verifier
    # http://geojson.io/

    spatial
        {
        "type": "Polygon",
        "coordinates":
            [
                [
                    [
                    -81.2109375,
                    -16.63619187839765
                    ],
                    [
                    -81.2109375,
                    13.581920900545844
                    ],
                    [
                    -33.046875,
                    13.581920900545844
                    ],
                    [
                    -33.046875,
                    -16.63619187839765
                    ],
                    [
                    -81.2109375,
                    -16.63619187839765
                    ]
                ]
            ]
        }

# -----------------------------------------------------
# Import our example data
#[user@desktop]

    astrotrop/protected/data/leicester/AstroTrop/Forest_Non-Forest_Congo
    astrotrop/protected/data/leicester/AstroTrop/Forest_Non-Forest_Congo/Forest_Cover_Congo.tif
    astrotrop/protected/data/leicester/AstroTrop/Forest_Non-Forest_Congo/Forest_Cover_Congo.hdr
    
    ESRI BIL Header File
    http://fileinfo.com/extension/hdr

        ENVI
        description = {
          Majority Analysis Result [Thu Mar 06 15:50:21 2014]}
        samples = 11250
        lines   = 11250
        bands   = 1
        header offset = 0
        file type = ENVI Classification
        data type = 1
        interleave = bsq
        sensor type = Unknown
        classes = 3
        class lookup = {
           0,   0,   0,   0, 139,   0, 255, 255, 255}
        class names = {
         Unclassified, Forest, 
         Non-Forest}
        byte order = 0
        map info = {Geographic Lat/Lon, 1.0000, 1.0000, 15.00000000, 5.00000000, 4.4444000000e-004, 4.4444000000e-004, WGS-84, units=Degrees}
        coordinate system string = {GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137.0,298.257223563]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]]}
        wavelength units = Unknown
        band names = {
         Majority Analysis (N05E15_10_lstack_noratio_ALL_cal_points_SVM.dat)}

    spatial
        {
        "type": "Polygon",
        "coordinates":
            [
                [
                    [
                      16.962890625,
                      -9.44906182688142
                    ],
                    [
                      16.962890625,
                      3.6888551431470478
                    ],
                    [
                      31.201171875,
                      3.6888551431470478
                    ],
                    [
                      31.201171875,
                      -9.44906182688142
                    ],
                    [
                      16.962890625,
                      -9.44906182688142
                    ]
                ]
            ]
        }

    astrotrop/protected/data/leicester/AstroTrop/Forest_Non-Forest_Mexico
    astrotrop/protected/data/leicester/AstroTrop/Forest_Non-Forest_Mexico/Forest_Cover_Mexico.tif
    astrotrop/protected/data/leicester/AstroTrop/Forest_Non-Forest_Mexico/Forest_Cover_Mexico.tfw

    World File for TIFF
    http://fileinfo.com/extension/tfw

        250.0000000000
        0.0000000000
        0.0000000000
        -250.0000000000
        -1590706.8019999999
        3791463.8270000000

    spatial
        {
        "type": "Polygon",
        "coordinates":
            [
                [
                    [
                      16.962890625,
                      -9.44906182688142
                    ],
                    [
                      16.962890625,
                      3.6888551431470478
                    ],
                    [
                      31.201171875,
                      3.6888551431470478
                    ],
                    [
                      31.201171875,
                      -9.44906182688142
                    ],
                    [
                      16.962890625,
                      -9.44906182688142
                    ]
                ]
            ]
        }

# -----------------------------------------------------

    #
    # GeoJASON converter
    http://ogre.adc4gis.com/


# -----------------------------------------------------
# Add some harvest sources
#[user@desktop]

    #
    # Data.Gov harvest sources
    http://catalog.data.gov/harvest

        CSW

            # +1
            # USGS Geo Data Portal
            # A metadata catalog that serves the USGS Geo Data Portal processing service.
            # http://catalog.data.gov/harvest/about/geo-data-portal 
            # http://cida.usgs.gov/geonetwork/srv/en/csw?request=GetCapabilities&service=CSW&version=2.0.2

            Problem
                Element '{http://www.opengis.net/gml/3.2}TimePeriod': not expected.
            Solution
                https://github.com/geosolutions-it/ckanext-geonetwork

            # 0
            # North Dakota GIS Hub Data Portal
            # The NDGIS Hub Data Portal can be used to find downloadable GIS data, GIS web services, and GIS applications 
            # http://catalog.data.gov/harvest/about/north-dakota-gis-hub-data-portal
            # https://apps.nd.gov/hubdataportal/srv/en/csw?SERVICE=CSW&VERSION=2.0.2&REQUEST=GetCapabilities

            # 0
            # AASG geothermal data CSW
            # http://catalog.data.gov/harvest/about/aasg-geothermal-data-csw
            # http://catalog.stategeothermaldata.org/geoportal/csw?request=GetCapabilities&service=CSW
            # HTTP Bad gateway

            # 0
            # GeoNode State CSW
            # http://catalog.data.gov/harvest/about/geonode-state-csw
            # http://geonode.state.gov/catalogue/csw?service=CSW&version=2.0.2&request=GetRecords&typenames=csw:Record&elementsetname=brief
            # [ckanext.harvest.harvesters.base] Validation Error: {'Id': 'Missing value', 'Name': 'Missing value'}
    
            # +6
            # State of California Geoportal
            # http://catalog.data.gov/harvest/about/state-of-california-geoportal
            # http://portal.gis.ca.gov/geoportal/csw/discovery


        DOC

            #
            # Static XML harvest source
            # http://data.metagrid.co.uk/astrotrop/test/test-001.xml

        CKAN    

            # +942
            # Bristol University
            # http://data.bris.ac.uk/data/


        WAF

            # INSPIRE metadata - Environment Agency
            # https://dcsu059g9fk65.cloudfront.net/

            Problem
                Element '{http://www.opengis.net/gml/3.2}TimePeriod': not expected.
            Solution
                https://github.com/geosolutions-it/ckanext-geonetwork


# -----------------------------------------------------
# Start the harvester processes.
# https://github.com/ckan/ckanext-harvest
#[user@desktop]

    #
    # Start the gather consumer
    source "${HOME:?}/astrotrop.conf"
    docker exec -it "${ckanname:?}" bash

        paster --plugin=ckanext-harvest harvester gather_consumer \
            -c "${ckanconf:?}/ckan.ini"

    #
    # Start the fetch consumer
    source "${HOME:?}/astrotrop.conf"
    docker exec -it "${ckanname:?}" bash

        paster --plugin=ckanext-harvest harvester fetch_consumer \
            -c "${ckanconf:?}/ckan.ini"

    #
    # Run pending harvest jobs
    source "${HOME:?}/astrotrop.conf"
    docker exec -it "${ckanname:?}" bash

        paster --plugin=ckanext-harvest harvester run \
            -c "${ckanconf:?}/ckan.ini"






todo

    Geospatial viewer
    https://github.com/ckan/ckanext-geoview


todo

    FITS file parser
    https://github.com/joetsoi/ckanext-astro

